// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GlobalStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GlobalStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GlobalStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(
      store.get_in_block("GlobalStats", id)
    );
  }

  static load(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(store.get("GlobalStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalGames(): BigInt {
    let value = this.get("totalGames");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGames(value: BigInt) {
    this.set("totalGames", Value.fromBigInt(value));
  }

  get totalPlayers(): BigInt {
    let value = this.get("totalPlayers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPlayers(value: BigInt) {
    this.set("totalPlayers", Value.fromBigInt(value));
  }

  get totalCarmenCaught(): BigInt {
    let value = this.get("totalCarmenCaught");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCarmenCaught(value: BigInt) {
    this.set("totalCarmenCaught", Value.fromBigInt(value));
  }

  get totalCarmenEscaped(): BigInt {
    let value = this.get("totalCarmenEscaped");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCarmenEscaped(value: BigInt) {
    this.set("totalCarmenEscaped", Value.fromBigInt(value));
  }

  get globalWinRate(): BigDecimal {
    let value = this.get("globalWinRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set globalWinRate(value: BigDecimal) {
    this.set("globalWinRate", Value.fromBigDecimal(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Player | null {
    return changetype<Player | null>(store.get_in_block("Player", id));
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get gamesPlayed(): BigInt {
    let value = this.get("gamesPlayed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gamesPlayed(value: BigInt) {
    this.set("gamesPlayed", Value.fromBigInt(value));
  }

  get gamesWon(): BigInt {
    let value = this.get("gamesWon");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gamesWon(value: BigInt) {
    this.set("gamesWon", Value.fromBigInt(value));
  }

  get gamesLost(): BigInt {
    let value = this.get("gamesLost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gamesLost(value: BigInt) {
    this.set("gamesLost", Value.fromBigInt(value));
  }

  get winRate(): BigDecimal {
    let value = this.get("winRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set winRate(value: BigDecimal) {
    this.set("winRate", Value.fromBigDecimal(value));
  }

  get totalScore(): BigInt {
    let value = this.get("totalScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalScore(value: BigInt) {
    this.set("totalScore", Value.fromBigInt(value));
  }

  get averageScore(): BigDecimal {
    let value = this.get("averageScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageScore(value: BigDecimal) {
    this.set("averageScore", Value.fromBigDecimal(value));
  }

  get bestScore(): BigInt {
    let value = this.get("bestScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bestScore(value: BigInt) {
    this.set("bestScore", Value.fromBigInt(value));
  }

  get longestWinStreak(): BigInt {
    let value = this.get("longestWinStreak");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set longestWinStreak(value: BigInt) {
    this.set("longestWinStreak", Value.fromBigInt(value));
  }

  get currentWinStreak(): BigInt {
    let value = this.get("currentWinStreak");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentWinStreak(value: BigInt) {
    this.set("currentWinStreak", Value.fromBigInt(value));
  }

  get firstGameAt(): BigInt {
    let value = this.get("firstGameAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstGameAt(value: BigInt) {
    this.set("firstGameAt", Value.fromBigInt(value));
  }

  get lastGameAt(): BigInt {
    let value = this.get("lastGameAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastGameAt(value: BigInt) {
    this.set("lastGameAt", Value.fromBigInt(value));
  }

  get games(): GameLoader {
    return new GameLoader("Player", this.get("id")!.toString(), "games");
  }
}

export class Game extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Game entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Game must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Game", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Game | null {
    return changetype<Game | null>(store.get_in_block("Game", id));
  }

  static load(id: string): Game | null {
    return changetype<Game | null>(store.get("Game", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gameId(): BigInt {
    let value = this.get("gameId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gameId(value: BigInt) {
    this.set("gameId", Value.fromBigInt(value));
  }

  get player(): string {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get questionIds(): Array<BigInt> {
    let value = this.get("questionIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set questionIds(value: Array<BigInt>) {
    this.set("questionIds", Value.fromBigIntArray(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get carmenCaught(): boolean {
    let value = this.get("carmenCaught");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set carmenCaught(value: boolean) {
    this.set("carmenCaught", Value.fromBoolean(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt | null {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt | null) {
    if (!value) {
      this.unset("endTime");
    } else {
      this.set("endTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get duration(): BigInt | null {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt | null) {
    if (!value) {
      this.unset("duration");
    } else {
      this.set("duration", Value.fromBigInt(<BigInt>value));
    }
  }

  get answers(): AnswerLoader {
    return new AnswerLoader("Game", this.get("id")!.toString(), "answers");
  }

  get totalAnswers(): BigInt {
    let value = this.get("totalAnswers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAnswers(value: BigInt) {
    this.set("totalAnswers", Value.fromBigInt(value));
  }

  get correctAnswers(): BigInt {
    let value = this.get("correctAnswers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set correctAnswers(value: BigInt) {
    this.set("correctAnswers", Value.fromBigInt(value));
  }

  get wrongAnswers(): BigInt {
    let value = this.get("wrongAnswers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set wrongAnswers(value: BigInt) {
    this.set("wrongAnswers", Value.fromBigInt(value));
  }
}

export class Answer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Answer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Answer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Answer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Answer | null {
    return changetype<Answer | null>(store.get_in_block("Answer", id));
  }

  static load(id: string): Answer | null {
    return changetype<Answer | null>(store.get("Answer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get game(): string {
    let value = this.get("game");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }

  get questionIndex(): BigInt {
    let value = this.get("questionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set questionIndex(value: BigInt) {
    this.set("questionIndex", Value.fromBigInt(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get playerAnswer(): BigInt {
    let value = this.get("playerAnswer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set playerAnswer(value: BigInt) {
    this.set("playerAnswer", Value.fromBigInt(value));
  }

  get isCorrect(): boolean {
    let value = this.get("isCorrect");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isCorrect(value: boolean) {
    this.set("isCorrect", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get timeFromStart(): BigInt {
    let value = this.get("timeFromStart");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeFromStart(value: BigInt) {
    this.set("timeFromStart", Value.fromBigInt(value));
  }
}

export class DailyStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyStats | null {
    return changetype<DailyStats | null>(store.get_in_block("DailyStats", id));
  }

  static load(id: string): DailyStats | null {
    return changetype<DailyStats | null>(store.get("DailyStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get gamesPlayed(): BigInt {
    let value = this.get("gamesPlayed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gamesPlayed(value: BigInt) {
    this.set("gamesPlayed", Value.fromBigInt(value));
  }

  get gamesWon(): BigInt {
    let value = this.get("gamesWon");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gamesWon(value: BigInt) {
    this.set("gamesWon", Value.fromBigInt(value));
  }

  get gamesLost(): BigInt {
    let value = this.get("gamesLost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gamesLost(value: BigInt) {
    this.set("gamesLost", Value.fromBigInt(value));
  }

  get uniquePlayers(): BigInt {
    let value = this.get("uniquePlayers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniquePlayers(value: BigInt) {
    this.set("uniquePlayers", Value.fromBigInt(value));
  }

  get totalScore(): BigInt {
    let value = this.get("totalScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalScore(value: BigInt) {
    this.set("totalScore", Value.fromBigInt(value));
  }

  get averageScore(): BigDecimal {
    let value = this.get("averageScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageScore(value: BigDecimal) {
    this.set("averageScore", Value.fromBigDecimal(value));
  }
}

export class QuestionStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestionStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): QuestionStats | null {
    return changetype<QuestionStats | null>(
      store.get_in_block("QuestionStats", id)
    );
  }

  static load(id: string): QuestionStats | null {
    return changetype<QuestionStats | null>(store.get("QuestionStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get timesAsked(): BigInt {
    let value = this.get("timesAsked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timesAsked(value: BigInt) {
    this.set("timesAsked", Value.fromBigInt(value));
  }

  get timesAnsweredCorrectly(): BigInt {
    let value = this.get("timesAnsweredCorrectly");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timesAnsweredCorrectly(value: BigInt) {
    this.set("timesAnsweredCorrectly", Value.fromBigInt(value));
  }

  get timesAnsweredWrong(): BigInt {
    let value = this.get("timesAnsweredWrong");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timesAnsweredWrong(value: BigInt) {
    this.set("timesAnsweredWrong", Value.fromBigInt(value));
  }

  get correctRate(): BigDecimal {
    let value = this.get("correctRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set correctRate(value: BigDecimal) {
    this.set("correctRate", Value.fromBigDecimal(value));
  }

  get averageAnswerTime(): BigDecimal {
    let value = this.get("averageAnswerTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageAnswerTime(value: BigDecimal) {
    this.set("averageAnswerTime", Value.fromBigDecimal(value));
  }
}

export class LeaderboardEntry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LeaderboardEntry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LeaderboardEntry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LeaderboardEntry", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LeaderboardEntry | null {
    return changetype<LeaderboardEntry | null>(
      store.get_in_block("LeaderboardEntry", id)
    );
  }

  static load(id: string): LeaderboardEntry | null {
    return changetype<LeaderboardEntry | null>(
      store.get("LeaderboardEntry", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get rank(): BigInt {
    let value = this.get("rank");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rank(value: BigInt) {
    this.set("rank", Value.fromBigInt(value));
  }

  get winRate(): BigDecimal {
    let value = this.get("winRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set winRate(value: BigDecimal) {
    this.set("winRate", Value.fromBigDecimal(value));
  }

  get gamesPlayed(): BigInt {
    let value = this.get("gamesPlayed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gamesPlayed(value: BigInt) {
    this.set("gamesPlayed", Value.fromBigInt(value));
  }

  get gamesWon(): BigInt {
    let value = this.get("gamesWon");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gamesWon(value: BigInt) {
    this.set("gamesWon", Value.fromBigInt(value));
  }

  get totalScore(): BigInt {
    let value = this.get("totalScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalScore(value: BigInt) {
    this.set("totalScore", Value.fromBigInt(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class GameLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Game[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Game[]>(value);
  }
}

export class AnswerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Answer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Answer[]>(value);
  }
}
